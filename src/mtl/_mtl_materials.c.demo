/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mtl_lib_load.c.gpu_demo                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kcharla <kcharla@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/10/24 23:01:55 by kcharla           #+#    #+#             */
/*   Updated: 2020/10/24 23:01:55 by kcharla          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "stdio.h"
#include "mtl.h"
#include "gpu_types.h"
#include <stdlib.h>
#include "libft.h"

int		main()
{
	t_mtl		*metal;

	metal = mtl_init();
	if (metal == NULL)
	{
		printf("mtl_init() fail\n");
		return (0);
	}
	printf("mtl_init() success\n");

	char *libstr = ft_read_file("shaders/rt_mtl___kernel.metal");
	int res = mtl_lib_load_source(metal, libstr);
	free(libstr);
	if (res != 0)
	{
		printf("mtl_lib_load_source() fail\n");
		return (0);
	}
	printf("mtl_lib_load_source() success\n");

	t_gpu_info	info;
	info.mat_num = 1;
	mtl_buffer_load_info(metal, &info, 1);

	t_gpu_mat *obj_buf = malloc(sizeof(t_gpu_obj));
	mtl_buffer_load_objects(metal, obj_buf, 1);

	t_gpu_mat *mat_buf = malloc(sizeof(t_gpu_mat) + 1000);
//	bzero((void*)mat_buf, sizeof(t_gpu_mat));
	mat_buf->id = 1;
	mat_buf->type = MAT_PBR;
	mat_buf->content.pbr.roughness = 0.5;
	mat_buf->content.pbr.transparency = 0;
	mat_buf->content.pbr.metalness = 0;
	mat_buf->content.pbr.ior = 1.2;
	mat_buf->content.pbr.albedo = vec3(1, 1, 1);
	mat_buf->content.pbr.f0 = vec3(0.02, 0.02, 0.02);
	mtl_buffer_load_materials(metal, mat_buf, 1);

//	char *my_text_raw = malloc(4 * 300 * 300);
	mtl_texture_create(metal, 300, 300);

	mtl_texture_create(metal, 300, 300);
	unsigned char *txr_filled_white = mtl_texture_get_ptr(metal, 1);
	int i;
	for (i = 0; i < 300 * 4 * 300; i++)
		txr_filled_white[i] = 255;

//	mtl_material_create(metal, 1, -1, -1, -1);

	res = mtl_kernel_run(metal, "scene_test", 0);
	printf("mtl_lib_kernel_run(): %d\n", res);
	if (res != 0)
		return (0);

	unsigned char *txr_test = mtl_texture_get_ptr(metal, 0);
	for (i = 0; i < 8; i++)
	{
		printf("%3u ", (unsigned) txr_test[i * 4 + 0]);
		printf("%3u ", (unsigned) txr_test[i * 4 + 1]);
		printf("%3u ", (unsigned) txr_test[i * 4 + 2]);
		printf("%3u ", (unsigned) txr_test[i * 4 + 3]);
		printf("\n");
	}
	return (0);
}
