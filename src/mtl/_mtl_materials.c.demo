/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mtl_lib_load.c.gpu_demo                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kcharla <kcharla@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/10/24 23:01:55 by kcharla           #+#    #+#             */
/*   Updated: 2020/10/24 23:01:55 by kcharla          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "stdio.h"
#include "mtl.h"
#include "gpu_types.h"
#include <stdlib.h>
#include "libft.h"

#define METAL_SHADER_FILENAME "shaders/metal_struct.metal shaders/metal_shader.metal shaders/rt_trace_mod_ggx.metal"
//#define DEMO_SPHERE_TEXTUR "any.png"
//#define METAL_SHADER_FILENAME "shaders/rt_mtl___kernel.metal"

#define size_x 1920
#define size_y 1080

#include "txr.h"

unsigned char 	*get_texture_rgba_fine_64();
unsigned char	*get_texture_rgba_empty_64();
void 			fill_mat_pbr(t_gpu_mat *mat);
void 			fill_mat_pbr2(t_gpu_mat *mat);
int				gpu_init(t_gpu **gpu_dest);
void 			fill_obj_sphere(t_gpu_obj *obj);
void 			fill_obj_cone(t_gpu_obj *obj);
void 			fill_obj_cylinder(t_gpu_obj *obj);
void 			fill_obj_plane(t_gpu_obj *obj);
void			fill_light(t_gpu_light *lig);
void			fill_light2(t_gpu_light *lig);
int				fio_png_write(char *data, int width, int height, char *filename);
int				fio_read_png_tmp(t_txr *texture);

int		main()
{
	int				res;
	t_gpu			*gpu;
	t_txr			*txr;

	//txr->filename should be valid .png name
	txr_init(&txr, "txr_name", (t_size2){1, 1});
	txr->filename = ft_strdup(DEMO_SPHERE_TEXTUR);
	if (fio_read_png_tmp(txr))
	{
		printf("Poshel nahuy");
	}
	if (gpu_init(&gpu))
	{
		printf("gpu_init() fail\n");
		return (0);
	}

	gpu->info.mat_num = 2;
	gpu->mat_buf = ft_malloc(sizeof(t_gpu_mat) * gpu->info.mat_num);
	fill_mat_pbr(&(gpu->mat_buf[0]));
	fill_mat_pbr2(&(gpu->mat_buf[1]));

	gpu->info.obj_num = 2;
	gpu->obj_buf = ft_malloc(sizeof(t_gpu_obj) * gpu->info.obj_num);
	fill_obj_sphere(&(gpu->obj_buf[0]));
//	fill_obj_cone(&(gpu->obj_buf[1]));
	fill_obj_cylinder(&(gpu->obj_buf[1]));
//	fill_obj_plane(&(gpu->obj_buf[1]));


	gpu->info.light_num = 2;
	gpu->lig_buf = ft_memalloc(sizeof(t_gpu_light) * gpu->info.light_num);
	fill_light(&(gpu->lig_buf[0]));
	fill_light2(&(gpu->lig_buf[1]));

	unsigned char *texture_rbga_first = get_texture_rgba_fine_64();
	unsigned char *texture_rbga_second = get_texture_rgba_fine_64();

	printf("mtl: %p\n", gpu->dev.mtl);

	gpu->info.txr_num = 2;
	// first added resource texture must have id = 0, second id = 1 ...
	int index0 = mtl_texture_resource_rgba8_load(gpu->dev.mtl, texture_rbga_first, 64, 64);
	int index1 = mtl_texture_resource_rgba8_load(gpu->dev.mtl, texture_rbga_second, 64, 64);
	if (index0 != 0 || index1 != 1)
		return (0);

	// first added target texture must have id = 0, second id = 1 ...
//	int target_index0 = mtl_texture_target_rgba8_load(gpu->dev.mtl, texture_rbga_target, 64, 64);

	mtl_buffer_load_info(gpu->dev.mtl, &(gpu->info), sizeof(t_gpu_info));
	mtl_buffer_load_objects(gpu->dev.mtl, gpu->obj_buf, gpu->info.obj_num * sizeof(t_gpu_obj));
	mtl_buffer_load_materials(gpu->dev.mtl, gpu->mat_buf, gpu->info.mat_num * sizeof(t_gpu_mat));
	mtl_buffer_load_lights(gpu->dev.mtl, gpu->lig_buf, gpu->info.light_num * sizeof(t_gpu_light));

	// MUST create texture, metal cannot add memory with no copy that was created by malloc()
	// https://developer.apple.com/documentation/metal/mtldevice/1433382-makebuffer
	int target_index0 = mtl_texture_create_target(gpu->dev.mtl, size_x, size_y);
	printf("mtl_texture_create(): %d\n", res);

	res = mtl_kernel_run(gpu->dev.mtl, "trace_mod_ggx", target_index0);
	printf("mtl_lib_kernel_run(): %d\n", res);
	if (res != 0)
		return (0);

	unsigned char  *texture_rbga_target = mtl_texture_get_ptr_target(gpu->dev.mtl, target_index0);

	res = fio_png_write((char *)texture_rbga_target, size_x, size_y, "trace_mod_ggx.png");
	printf("fio_png_write(): %d\n", res);

	// TODO add mtl_clear_resources() call
	// so we can delete created textures/buffers

	return (0);
}

void 			fill_mat_pbr(t_gpu_mat *mat)
{
	mat->id = 0;
	mat->type = MAT_PBR;

	mat->content.pbr.albedo = vec3(0.73, 0.93, 0.0);
	mat->content.pbr.f0 = vec3(0.0, 0.0, 0.0);
	mat->content.pbr.metalness = 0.0;
	mat->content.pbr.roughness = 0.4;
	mat->content.pbr.transparency = 0.0;
	mat->content.pbr.ior = 1.6;

	mat->content.pbr.albedo_txr_index = -1;
	mat->content.pbr.f0_txr_index = -1;
	mat->content.pbr.metalness_txr_index = -1;
	mat->content.pbr.roughness_txr_index = -1;
	mat->content.pbr.transparency_txr_index = -1;
	mat->content.pbr.normal_txr_index = 1;
}

void 			fill_mat_pbr2(t_gpu_mat *mat)
{
	mat->id = 1;
	mat->type = MAT_PBR;

	mat->content.pbr.albedo = vec3(0.6, 0.6, 0.6);
	mat->content.pbr.f0 = vec3(0.0, 0.0, 0.0);
	mat->content.pbr.metalness = 0.0;
	mat->content.pbr.roughness = 1.0;
	mat->content.pbr.transparency = 0.0;
	mat->content.pbr.ior = 1.6;

	mat->content.pbr.albedo_txr_index = 0;
	mat->content.pbr.f0_txr_index = -1;
	mat->content.pbr.metalness_txr_index = -1;
	mat->content.pbr.roughness_txr_index = -1;
	mat->content.pbr.transparency_txr_index = -1;
	mat->content.pbr.normal_txr_index = 1;
}

void 			fill_obj_plane(t_gpu_obj *obj)
{
	obj->id = 2;
	obj->mat_index = 1;
	obj->map_axis = mat3x3_identity();
	obj->type = SHP_PLANE;
	obj->shape.plane.n = vec3(0, 1, 0);
	obj->shape.plane.d = 9.0;
}

void 			fill_obj_sphere(t_gpu_obj *obj)
{
	obj->id = 0;
	obj->mat_index = 1;
	obj->map_axis = mat3x3_identity();
	obj->type = SHP_SPHERE;
	obj->shape.sphere.pos = vec3(3, -3, 10);
	obj->shape.sphere.r = 1;
}

void 			fill_obj_cone(t_gpu_obj *obj)
{
	obj->id = 1;
	obj->mat_index = 1;
	obj->type = SHP_CONE;
	obj->shape.cone.pos = vec3(0, 5, 15);
	obj->shape.cone.cap = vec3(0, -5, 15);
	obj->shape.cone.r = 3;
}

void 			fill_obj_cylinder(t_gpu_obj *obj)
{
	obj->id = 1;
	obj->mat_index = 1;
	obj->type = SHP_CYLINDER;
	obj->shape.cylinder.pos = vec3(0, 5, 15);
	obj->shape.cylinder.cap = vec3(0, -5, 21);
	obj->shape.cylinder.r = 2;
}

void			fill_light(t_gpu_light *lig)
{
	lig->id = 0;
	lig->col = vec3(1.0, 1.0, 1.0);
	lig->pos = vec3(0, 0, 0);
	lig->power = 500;
}

void			fill_light2(t_gpu_light *lig)
{
	lig->id = 0;
	lig->col = vec3(1.0, 1.0, 1.0);
	lig->pos = vec3(3, -3, 30);
	lig->power = 500;
}

unsigned char *get_texture_rgba_fine_64()
{
	int i;
	int j;
	int w = 64;
	int h = 64;
	int stride = w * 4;
	unsigned char *texture_rbga = ft_malloc(sizeof(unsigned char) * stride * h);
	for (i = 0; i < h; i++)
		for (j = 0; j < w; j++)
		{
			int pixnum = i * stride + j * 4;
			texture_rbga[pixnum + 0] = (pixnum % 2 == 0 ? 127 : 0) + (pixnum % 4 == 0 ? 127 : 0);
			texture_rbga[pixnum + 1] = (pixnum % 2 == 1 ? 127 : 0) + (pixnum % 8 == 0 ? 127 : 0);
			texture_rbga[pixnum + 2] = (pixnum % 2 == 0 ? 127 : 0) + (pixnum % 16 == 0 ? 127 : 0);
			texture_rbga[pixnum + 3] = 255;
		}
	return (texture_rbga);
}

unsigned char *get_texture_rgba_empty_64()
{
	int i;
	int j;
	int w = 64;
	int h = 64;
	int stride = w * 4;
	unsigned char *texture_rbga = ft_malloc(sizeof(unsigned char) * stride * h);
	for (i = 0; i < h; i++)
		for (j = 0; j < w; j++)
		{
			int pixnum = i * stride + j * 4;
			texture_rbga[pixnum + 0] = 0;
			texture_rbga[pixnum + 1] = (0);
			texture_rbga[pixnum + 2] = (0);
			texture_rbga[pixnum + 3] = 255;
		}
	return (texture_rbga);
}

int		gpu_init(t_gpu **gpu_dest)
{
	t_gpu		*gpu;
	char 		*libstr;

	gpu = ft_malloc(sizeof(t_gpu));
	if (gpu == NULL || gpu_dest == NULL)
		return (-1);
	gpu->dev.mtl = mtl_init();
	if (gpu->dev.mtl == NULL)
		return (-1);
	printf("mtl: %p\n", gpu->dev.mtl);
	ft_read_files(&libstr ,METAL_SHADER_FILENAME);
	int res = mtl_lib_load_source(gpu->dev.mtl, libstr);
	free(libstr);
	if (res != 0)
		return (-1);

	gpu->info.camera.pos = vec3_zero();
	gpu->info.camera.rot_axis = mat3x3_identity();
	gpu->info.camera.fov = (t_vec2){90, 50};
	gpu->info.camera.id = 0;

	*gpu_dest = gpu;
	return (0);
}
