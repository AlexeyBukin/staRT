/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   gpu.demo                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kcharla <kcharla@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/10/26 17:20:58 by kcharla           #+#    #+#             */
/*   Updated: 2020/10/26 17:20:58 by kcharla          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "rt.h"

// gcc -x c gpu.c.demo

int						demo_kernel_run(t_rt *rt);

int						main(int ac, char **av)
{
	t_rt				*rt;

	if (rt_init(&rt))
		return (rt_error("Cannot init t_rt struct", 0));
	rt->app = gtk_application_new ("ru.school-21.start", G_APPLICATION_FLAGS_NONE);
	if (g_signal_connect (rt->app, "activate", G_CALLBACK (activate), rt) <= 0)
		return (rt_err("Cannot connect \'activate\' signal to rt->app"));
	g_application_run (G_APPLICATION (rt->app), ac, av);
	return (0);
}

int		demo_kernel_run(t_rt *rt)
{
	t_scn		*scn;
	t_obj		*objs;
	t_mat		*mats;

	scn = ft_memalloc(sizeof(t_scn));

	scn->objects_num = 1;
	objs = ft_memalloc(sizeof(t_obj) * scn->objects_num);
	scn->objects = objs;

	scn->materials_num = 1;
	mats = ft_memalloc(sizeof(t_mat) * scn->materials_num);
	scn->materials = mats;

	t_obj		my_sphere;
	my_sphere.type = OBJ_SPHERE;
	my_sphere.shape.sphere.pos = (t_vec3){5.0f, 0.0f, 1.0f};
	my_sphere.shape.sphere.r = 2.0f;
	my_sphere.material_id = 0;
	my_sphere.id = 0;
	objs[0] = my_sphere;

	t_mat		my_material;
	my_material.id = 0;
	my_material.metalness = 0;
	my_material.roughness = 0.5f;
	my_material.ior = 1.2f;
	my_material.transparency = 0.0f;
	my_material.albedo = (t_vec3){1.0, 1.0, 0.0};
	my_material.f0 = (t_vec3){1.0, 1.0, 0.0};
	mats[0] = my_material;

	rt->scene = scn;
	if (gpu_buffer_load(rt))
		return (rt_err("gpu_buffer_load() fail"));
	if (gpu_kernel_run(rt))
		return (rt_err("gpu_kernel_run() fail"));
	return (0);
}